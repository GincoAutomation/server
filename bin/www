#!/usr/bin/env node

/**
 * Module dependencies.
 */
var debug = require('debug')('home-automation-server:server');
var http = require('http');
const WebSocket = require('ws');

const config = require('../config/config');
var app = require('../src/app');
var wsHandlers = require('../src/ws');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || config.defaultPort || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

//initialize the WebSocket server instance
const wss = new WebSocket.Server({ server, path: '/websocket' });
wss.on('connection', (ws) => {
  console.log('ws connection opened')
  ws.isAlive = true;
  ws.on('pong', () => ws.isAlive = true);
  ws.on('message', wsHandlers.onMessage);
  ws.on('close', () => console.log("ws connection closed"))
});

// set broadcast handler
wsHandlers.setBroadcast((message) => {
  wss.clients.forEach((ws) => {
    if (ws.readyState === WebSocket.OPEN) {
      console.log('ws send', message);
      ws.send(message);
    }
  });
})

// set hartbeat
const interval = setInterval(() => {
  wss.clients.forEach((ws) => {
    if (!ws.isAlive) return ws.terminate();
    ws.isAlive = false;
    ws.ping();  
  });
}, 30000)

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, () => console.log(`Home Automation server listening on port ${port}!`));
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
